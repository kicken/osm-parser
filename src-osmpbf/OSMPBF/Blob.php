<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fileformat.proto

namespace OSMPBF;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>OSMPBF.Blob</code>
 */
class Blob extends \Google\Protobuf\Internal\Message
{
    /**
     * When compressed, the uncompressed size
     *
     * Generated from protobuf field <code>optional int32 raw_size = 2;</code>
     */
    protected $raw_size = null;
    protected $data;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $raw_size
     *           When compressed, the uncompressed size
     *     @type string $raw
     *           No compression
     *     @type string $zlib_data
     *           Possible compressed versions of the data.
     *     @type string $lzma_data
     *           For LZMA compressed data (optional)
     *     @type string $OBSOLETE_bzip2_data
     *           Formerly used for bzip2 compressed data. Deprecated in 2010.
     *     @type string $lz4_data
     *           For LZ4 compressed data (optional)
     *     @type string $zstd_data
     *           For ZSTD compressed data (optional)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Fileformat::initOnce();
        parent::__construct($data);
    }

    /**
     * When compressed, the uncompressed size
     *
     * Generated from protobuf field <code>optional int32 raw_size = 2;</code>
     * @return int
     */
    public function getRawSize()
    {
        return isset($this->raw_size) ? $this->raw_size : 0;
    }

    public function hasRawSize()
    {
        return isset($this->raw_size);
    }

    public function clearRawSize()
    {
        unset($this->raw_size);
    }

    /**
     * When compressed, the uncompressed size
     *
     * Generated from protobuf field <code>optional int32 raw_size = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setRawSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->raw_size = $var;

        return $this;
    }

    /**
     * No compression
     *
     * Generated from protobuf field <code>bytes raw = 1;</code>
     * @return string
     */
    public function getRaw()
    {
        return $this->readOneof(1);
    }

    public function hasRaw()
    {
        return $this->hasOneof(1);
    }

    /**
     * No compression
     *
     * Generated from protobuf field <code>bytes raw = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setRaw($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Possible compressed versions of the data.
     *
     * Generated from protobuf field <code>bytes zlib_data = 3;</code>
     * @return string
     */
    public function getZlibData()
    {
        return $this->readOneof(3);
    }

    public function hasZlibData()
    {
        return $this->hasOneof(3);
    }

    /**
     * Possible compressed versions of the data.
     *
     * Generated from protobuf field <code>bytes zlib_data = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setZlibData($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * For LZMA compressed data (optional)
     *
     * Generated from protobuf field <code>bytes lzma_data = 4;</code>
     * @return string
     */
    public function getLzmaData()
    {
        return $this->readOneof(4);
    }

    public function hasLzmaData()
    {
        return $this->hasOneof(4);
    }

    /**
     * For LZMA compressed data (optional)
     *
     * Generated from protobuf field <code>bytes lzma_data = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setLzmaData($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Formerly used for bzip2 compressed data. Deprecated in 2010.
     *
     * Generated from protobuf field <code>bytes OBSOLETE_bzip2_data = 5 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getOBSOLETEBzip2Data()
    {
        @trigger_error('OBSOLETE_bzip2_data is deprecated.', E_USER_DEPRECATED);
        return $this->readOneof(5);
    }

    public function hasOBSOLETEBzip2Data()
    {
        @trigger_error('OBSOLETE_bzip2_data is deprecated.', E_USER_DEPRECATED);
        return $this->hasOneof(5);
    }

    /**
     * Formerly used for bzip2 compressed data. Deprecated in 2010.
     *
     * Generated from protobuf field <code>bytes OBSOLETE_bzip2_data = 5 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setOBSOLETEBzip2Data($var)
    {
        @trigger_error('OBSOLETE_bzip2_data is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, False);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * For LZ4 compressed data (optional)
     *
     * Generated from protobuf field <code>bytes lz4_data = 6;</code>
     * @return string
     */
    public function getLz4Data()
    {
        return $this->readOneof(6);
    }

    public function hasLz4Data()
    {
        return $this->hasOneof(6);
    }

    /**
     * For LZ4 compressed data (optional)
     *
     * Generated from protobuf field <code>bytes lz4_data = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setLz4Data($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * For ZSTD compressed data (optional)
     *
     * Generated from protobuf field <code>bytes zstd_data = 7;</code>
     * @return string
     */
    public function getZstdData()
    {
        return $this->readOneof(7);
    }

    public function hasZstdData()
    {
        return $this->hasOneof(7);
    }

    /**
     * For ZSTD compressed data (optional)
     *
     * Generated from protobuf field <code>bytes zstd_data = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setZstdData($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getData()
    {
        return $this->whichOneof("data");
    }

}

