<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: osmformat.proto

namespace OSMPBF;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Optional metadata that may be included into each primitive. 
 *
 * Generated from protobuf message <code>OSMPBF.Info</code>
 */
class Info extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>optional int32 version = 1;</code>
     */
    protected $version = null;
    /**
     * Generated from protobuf field <code>optional int64 timestamp = 2;</code>
     */
    protected $timestamp = null;
    /**
     * Generated from protobuf field <code>optional int64 changeset = 3;</code>
     */
    protected $changeset = null;
    /**
     * Generated from protobuf field <code>optional int32 uid = 4;</code>
     */
    protected $uid = null;
    /**
     * String IDs
     *
     * Generated from protobuf field <code>optional uint32 user_sid = 5;</code>
     */
    protected $user_sid = null;
    /**
     * The visible flag is used to store history information. It indicates that
     * the current object version has been created by a delete operation on the
     * OSM API.
     * When a writer sets this flag, it MUST add a required_features tag with
     * value "HistoricalInformation" to the HeaderBlock.
     * If this flag is not available for some object it MUST be assumed to be
     * true if the file has the required_features tag "HistoricalInformation"
     * set.
     *
     * Generated from protobuf field <code>optional bool visible = 6;</code>
     */
    protected $visible = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $version
     *     @type int|string $timestamp
     *     @type int|string $changeset
     *     @type int $uid
     *     @type int $user_sid
     *           String IDs
     *     @type bool $visible
     *           The visible flag is used to store history information. It indicates that
     *           the current object version has been created by a delete operation on the
     *           OSM API.
     *           When a writer sets this flag, it MUST add a required_features tag with
     *           value "HistoricalInformation" to the HeaderBlock.
     *           If this flag is not available for some object it MUST be assumed to be
     *           true if the file has the required_features tag "HistoricalInformation"
     *           set.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Osmformat::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>optional int32 version = 1;</code>
     * @return int
     */
    public function getVersion()
    {
        return isset($this->version) ? $this->version : 0;
    }

    public function hasVersion()
    {
        return isset($this->version);
    }

    public function clearVersion()
    {
        unset($this->version);
    }

    /**
     * Generated from protobuf field <code>optional int32 version = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkInt32($var);
        $this->version = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional int64 timestamp = 2;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return isset($this->timestamp) ? $this->timestamp : 0;
    }

    public function hasTimestamp()
    {
        return isset($this->timestamp);
    }

    public function clearTimestamp()
    {
        unset($this->timestamp);
    }

    /**
     * Generated from protobuf field <code>optional int64 timestamp = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkInt64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional int64 changeset = 3;</code>
     * @return int|string
     */
    public function getChangeset()
    {
        return isset($this->changeset) ? $this->changeset : 0;
    }

    public function hasChangeset()
    {
        return isset($this->changeset);
    }

    public function clearChangeset()
    {
        unset($this->changeset);
    }

    /**
     * Generated from protobuf field <code>optional int64 changeset = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setChangeset($var)
    {
        GPBUtil::checkInt64($var);
        $this->changeset = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional int32 uid = 4;</code>
     * @return int
     */
    public function getUid()
    {
        return isset($this->uid) ? $this->uid : 0;
    }

    public function hasUid()
    {
        return isset($this->uid);
    }

    public function clearUid()
    {
        unset($this->uid);
    }

    /**
     * Generated from protobuf field <code>optional int32 uid = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setUid($var)
    {
        GPBUtil::checkInt32($var);
        $this->uid = $var;

        return $this;
    }

    /**
     * String IDs
     *
     * Generated from protobuf field <code>optional uint32 user_sid = 5;</code>
     * @return int
     */
    public function getUserSid()
    {
        return isset($this->user_sid) ? $this->user_sid : 0;
    }

    public function hasUserSid()
    {
        return isset($this->user_sid);
    }

    public function clearUserSid()
    {
        unset($this->user_sid);
    }

    /**
     * String IDs
     *
     * Generated from protobuf field <code>optional uint32 user_sid = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setUserSid($var)
    {
        GPBUtil::checkUint32($var);
        $this->user_sid = $var;

        return $this;
    }

    /**
     * The visible flag is used to store history information. It indicates that
     * the current object version has been created by a delete operation on the
     * OSM API.
     * When a writer sets this flag, it MUST add a required_features tag with
     * value "HistoricalInformation" to the HeaderBlock.
     * If this flag is not available for some object it MUST be assumed to be
     * true if the file has the required_features tag "HistoricalInformation"
     * set.
     *
     * Generated from protobuf field <code>optional bool visible = 6;</code>
     * @return bool
     */
    public function getVisible()
    {
        return isset($this->visible) ? $this->visible : false;
    }

    public function hasVisible()
    {
        return isset($this->visible);
    }

    public function clearVisible()
    {
        unset($this->visible);
    }

    /**
     * The visible flag is used to store history information. It indicates that
     * the current object version has been created by a delete operation on the
     * OSM API.
     * When a writer sets this flag, it MUST add a required_features tag with
     * value "HistoricalInformation" to the HeaderBlock.
     * If this flag is not available for some object it MUST be assumed to be
     * true if the file has the required_features tag "HistoricalInformation"
     * set.
     *
     * Generated from protobuf field <code>optional bool visible = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setVisible($var)
    {
        GPBUtil::checkBool($var);
        $this->visible = $var;

        return $this;
    }

}

